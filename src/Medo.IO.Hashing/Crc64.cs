/* Josip Medved <jmedved@jmedved.com> * www.medo64.com * MIT License */

//2022-11-13: Initial version

namespace Medo.IO.Hashing;

using System;
using System.Buffers.Binary;
using System.IO.Hashing;
using System.Runtime.CompilerServices;

/// <summary>
/// Computes hash using 64-bit CRC algorithm.
/// The following CRC-64 variants are supported: ECMA-182, GO-ISO, GO-ECMA,
/// MS, REDIS, XZ, and custom definitions.
/// </summary>
/// <example>
/// <code>
/// var crc = Crc64.GetEcma182();
/// crc.Append(Encoding.ASCII.GetBytes("Test"));
/// var hashValue = crc.HashAsUInt64;
/// </code>
/// </example>
public sealed class Crc64 : NonCryptographicHashAlgorithm {

    /// <summary>
    /// Creates a new instance using the CRC-32/ISO-HDLC variant.
    /// </summary>
    /// <remarks>
    /// Polynom: 0x04C11DB7
    /// Initial value: 0xFFFFFFFF
    /// Reflect In: Yes
    /// Reflect Out: Yes
    /// Output XOR: 0xFFFFFFFF
    /// </remarks>
    [Obsolete("Use GetCustom instead")]
    public Crc64()
        : this(0x04C11DB7, 0xFFFFFFFF, true, true, 0xFFFFFFFF) {
    }

    /// <summary>
    /// Creates new instance.
    /// </summary>
    /// <param name="polynomial">Polynomial value.</param>
    /// <param name="initialValue">Starting digest.</param>
    /// <param name="reflectIn">If true, input byte is in reflected (LSB first) bit order.</param>
    /// <param name="reflectOut">If true, digest is in reflected (LSB first) bit order.</param>
    /// <param name="finalXorValue">Final XOR value.</param>
    private Crc64(ulong polynomial, ulong initialValue, bool reflectIn, bool reflectOut, ulong finalXorValue)
        : base(8) {
        _polynomial = polynomial;
        _initialValue = initialValue;
        _reverseIn = reflectIn ^ BitConverter.IsLittleEndian;
        _reverseOut = reflectOut ^ BitConverter.IsLittleEndian;
        _finalXorValue = finalXorValue;
        ProcessInitialization();
    }


    /// <summary>
    /// Returns a custom CRC-32 variant.
    /// </summary>
    /// <param name="polynomial">Polynomial value.</param>
    /// <param name="initialValue">Starting digest.</param>
    /// <param name="reflectIn">If true, input byte is in reflected (LSB first) bit order.</param>
    /// <param name="reflectOut">If true, digest is in reflected (LSB first) bit order.</param>
    /// <param name="finalXorValue">Final XOR value.</param>
    /// <remarks>
    /// Name                                               Polynomial          Init                XorOut              Reflect
    /// ----------------------------------------------------------------------------------------------------------------------
    /// ECMA-182                                           0x42F0E1EBA9EA3693  0x0000000000000000  0x0000000000000000  -
    /// GO-ISO                                             0x000000000000001B  0xFFFFFFFFFFFFFFFF  0xFFFFFFFFFFFFFFFF  In/Out
    /// MS                                                 0x259C84CBA6426349  0xFFFFFFFFFFFFFFFF  0x0000000000000000  In/Out
    /// REDIS                                              0xAD93D23594C935A9  0x0000000000000000  0x0000000000000000  In/Out
    /// WE                                                 0x42F0E1EBA9EA3693  0xFFFFFFFFFFFFFFFF  0xFFFFFFFFFFFFFFFF  -
    /// XZ / GO-ECMA                                       0x42F0E1EBA9EA3693  0xFFFFFFFFFFFFFFFF  0xFFFFFFFFFFFFFFFF  In/Out
    ///
    /// See also:
    /// - https://reveng.sourceforge.io/crc-catalogue/17plus.htm
    /// - https://users.ece.cmu.edu/~koopman/crc/index.html
    /// </remarks>
    public static Crc64 GetCustom(ulong polynomial, ulong initialValue, bool reflectIn, bool reflectOut, ulong finalXorValue) {
        return new Crc64(polynomial, initialValue, reflectIn, reflectOut, finalXorValue);
    }

    /// <summary>
    /// Returns CRC-64/ECMA-182 variant.
    /// Compatible with System.IO.Hashing.Crc64.
    /// </summary>
    /// <remarks>
    public static Crc64 GetDefault() {
        return GetEcma182();
    }

    /// <summary>
    /// Returns CRC-64/ECMA-182 variant.
    /// </summary>
    /// <remarks>
    /// Polynom: 0x42F0E1EBA9EA3693
    /// Initial value: 0x0000000000000000
    /// Reflect In: No
    /// Reflect Out: No
    /// Output XOR: 0x0000000000000000
    /// </remarks>
    public static Crc64 GetEcma182() {
        return new Crc64(0x42F0E1EBA9EA3693, 0x0000000000000000, false, false, 0x0000000000000000);
    }

    /// <summary>
    /// Returns CRC-64/GO-ISO variant.
    /// </summary>
    /// <remarks>
    /// Polynom: 0x000000000000001B
    /// Initial value: 0xFFFFFFFFFFFFFFFF
    /// Reflect In: Yes
    /// Reflect Out: Yes
    /// Output XOR: 0xFFFFFFFFFFFFFFFF
    /// </remarks>
    public static Crc64 GetGoIso() {
        return new Crc64(0x000000000000001B, 0xFFFFFFFFFFFFFFFF, true, true, 0xFFFFFFFFFFFFFFFF);
    }

    /// <summary>
    /// Returns CRC-64/MS variant.
    /// </summary>
    /// <remarks>
    /// Polynom: 0x259C84CBA6426349
    /// Initial value: 0xFFFFFFFFFFFFFFFF
    /// Reflect In: Yes
    /// Reflect Out: Yes
    /// Output XOR: 0x0000000000000000
    /// </remarks>
    public static Crc64 GetMs() {
        return new Crc64(0x259C84CBA6426349, 0xFFFFFFFFFFFFFFFF, true, true, 0x0000000000000000);
    }

    /// <summary>
    /// Returns CRC-64/REDIS variant.
    /// </summary>
    /// <remarks>
    /// Polynom: 0xAD93D23594C935A9
    /// Initial value: 0x0000000000000000
    /// Reflect In: Yes
    /// Reflect Out: Yes
    /// Output XOR: 0x0000000000000000
    /// </remarks>
    public static Crc64 GetRedis() {
        return new Crc64(0xAD93D23594C935A9, 0x0000000000000000, true, true, 0x0000000000000000);
    }

    /// <summary>
    /// Returns CRC-64/WE variant.
    /// </summary>
    /// <remarks>
    /// Polynom: 0x42F0E1EBA9EA3693
    /// Initial value: 0xFFFFFFFFFFFFFFFF
    /// Reflect In: No
    /// Reflect Out: No
    /// Output XOR: 0xFFFFFFFFFFFFFFFF
    /// </remarks>
    public static Crc64 GetWe() {
        return new Crc64(0x42F0E1EBA9EA3693, 0xFFFFFFFFFFFFFFFF, false, false, 0xFFFFFFFFFFFFFFFF);
    }

    /// <summary>
    /// Returns CRC-64/XZ variant.
    /// </summary>
    /// <remarks>
    /// Polynom: 0x42F0E1EBA9EA3693
    /// Initial value: 0xFFFFFFFFFFFFFFFF
    /// Reflect In: Yes
    /// Reflect Out: Yes
    /// Output XOR: 0xFFFFFFFFFFFFFFFF
    /// </remarks>
    public static Crc64 GetXz() {
        return new Crc64(0x42F0E1EBA9EA3693, 0xFFFFFFFFFFFFFFFF, true, true, 0xFFFFFFFFFFFFFFFF);
    }

    /// <summary>
    /// Returns CRC-64/GO-ECMA variant.
    /// </summary>
    /// <remarks>
    /// Polynom: 0x42F0E1EBA9EA3693
    /// Initial value: 0xFFFFFFFFFFFFFFFF
    /// Reflect In: Yes
    /// Reflect Out: Yes
    /// Output XOR: 0xFFFFFFFFFFFFFFFF
    /// </remarks>
    public static Crc64 GetGoEcma() {
        return GetXz();
    }


    #region NonCryptographicHashAlgorithm

    /// <inheritdoc/>
    public override void Append(ReadOnlySpan<byte> source) {
        ProcessBytes(source);
    }

    /// <inheritdoc/>
    public override void Reset() {
        ProcessInitialization();
    }

    /// <summary>
    /// It will return result as machine endian.
    /// </summary>
    /// <param name="destination"></param>
    protected override void GetCurrentHashCore(Span<byte> destination) {
        if (BitConverter.IsLittleEndian ^ _reverseOut) {
            BinaryPrimitives.WriteUInt64LittleEndian(destination, HashAsUInt64);
        } else {
            BinaryPrimitives.WriteUInt64BigEndian(destination, HashAsUInt64);
        }
    }

    #endregion NonCryptographicHashAlgorithm


    #region Algorithm

    private readonly ulong _polynomial;
    private readonly ulong _initialValue;
    private readonly bool _reverseIn;
    private readonly bool _reverseOut;
    private readonly ulong _finalXorValue;

    private void ProcessInitialization() {
        _currDigest = _initialValue;
        var polynomialR = BitwiseReverse(_polynomial);
        for (var i = 0; i < 256; i++) {
            var crcValue = (ulong)i;

            for (var j = 1; j <= 8; j++) {
                if ((crcValue & 1) == 1) {
                    crcValue = (crcValue >> 1) ^ polynomialR;
                } else {
                    crcValue >>= 1;
                }
            }

            _lookup[i] = crcValue;
        }
    }

    private readonly ulong[] _lookup = new ulong[256];
    private ulong _currDigest;

    private void ProcessBytes(ReadOnlySpan<byte> source) {
        foreach (var b in source) {
            if (_reverseIn) {
                _currDigest = (_currDigest >> 8) ^ _lookup[((_currDigest & 0xFF) ^ _lookupBitReverse0[b])];
            } else {
                _currDigest = (_currDigest >> 8) ^ _lookup[((_currDigest & 0xFF) ^ (b))];
            }
        }
    }

    private static readonly ulong[] _lookupBitReverse7 = { 0x0000000000000000, 0x8000000000000000, 0x4000000000000000, 0xC000000000000000, 0x2000000000000000, 0xA000000000000000, 0x6000000000000000, 0xE000000000000000, 0x1000000000000000, 0x9000000000000000, 0x5000000000000000, 0xD000000000000000, 0x3000000000000000, 0xB000000000000000, 0x7000000000000000, 0xF000000000000000, 0x0800000000000000, 0x8800000000000000, 0x4800000000000000, 0xC800000000000000, 0x2800000000000000, 0xA800000000000000, 0x6800000000000000, 0xE800000000000000, 0x1800000000000000, 0x9800000000000000, 0x5800000000000000, 0xD800000000000000, 0x3800000000000000, 0xB800000000000000, 0x7800000000000000, 0xF800000000000000, 0x0400000000000000, 0x8400000000000000, 0x4400000000000000, 0xC400000000000000, 0x2400000000000000, 0xA400000000000000, 0x6400000000000000, 0xE400000000000000, 0x1400000000000000, 0x9400000000000000, 0x5400000000000000, 0xD400000000000000, 0x3400000000000000, 0xB400000000000000, 0x7400000000000000, 0xF400000000000000, 0x0C00000000000000, 0x8C00000000000000, 0x4C00000000000000, 0xCC00000000000000, 0x2C00000000000000, 0xAC00000000000000, 0x6C00000000000000, 0xEC00000000000000, 0x1C00000000000000, 0x9C00000000000000, 0x5C00000000000000, 0xDC00000000000000, 0x3C00000000000000, 0xBC00000000000000, 0x7C00000000000000, 0xFC00000000000000, 0x0200000000000000, 0x8200000000000000, 0x4200000000000000, 0xC200000000000000, 0x2200000000000000, 0xA200000000000000, 0x6200000000000000, 0xE200000000000000, 0x1200000000000000, 0x9200000000000000, 0x5200000000000000, 0xD200000000000000, 0x3200000000000000, 0xB200000000000000, 0x7200000000000000, 0xF200000000000000, 0x0A00000000000000, 0x8A00000000000000, 0x4A00000000000000, 0xCA00000000000000, 0x2A00000000000000, 0xAA00000000000000, 0x6A00000000000000, 0xEA00000000000000, 0x1A00000000000000, 0x9A00000000000000, 0x5A00000000000000, 0xDA00000000000000, 0x3A00000000000000, 0xBA00000000000000, 0x7A00000000000000, 0xFA00000000000000, 0x0600000000000000, 0x8600000000000000, 0x4600000000000000, 0xC600000000000000, 0x2600000000000000, 0xA600000000000000, 0x6600000000000000, 0xE600000000000000, 0x1600000000000000, 0x9600000000000000, 0x5600000000000000, 0xD600000000000000, 0x3600000000000000, 0xB600000000000000, 0x7600000000000000, 0xF600000000000000, 0x0E00000000000000, 0x8E00000000000000, 0x4E00000000000000, 0xCE00000000000000, 0x2E00000000000000, 0xAE00000000000000, 0x6E00000000000000, 0xEE00000000000000, 0x1E00000000000000, 0x9E00000000000000, 0x5E00000000000000, 0xDE00000000000000, 0x3E00000000000000, 0xBE00000000000000, 0x7E00000000000000, 0xFE00000000000000, 0x0100000000000000, 0x8100000000000000, 0x4100000000000000, 0xC100000000000000, 0x2100000000000000, 0xA100000000000000, 0x6100000000000000, 0xE100000000000000, 0x1100000000000000, 0x9100000000000000, 0x5100000000000000, 0xD100000000000000, 0x3100000000000000, 0xB100000000000000, 0x7100000000000000, 0xF100000000000000, 0x0900000000000000, 0x8900000000000000, 0x4900000000000000, 0xC900000000000000, 0x2900000000000000, 0xA900000000000000, 0x6900000000000000, 0xE900000000000000, 0x1900000000000000, 0x9900000000000000, 0x5900000000000000, 0xD900000000000000, 0x3900000000000000, 0xB900000000000000, 0x7900000000000000, 0xF900000000000000, 0x0500000000000000, 0x8500000000000000, 0x4500000000000000, 0xC500000000000000, 0x2500000000000000, 0xA500000000000000, 0x6500000000000000, 0xE500000000000000, 0x1500000000000000, 0x9500000000000000, 0x5500000000000000, 0xD500000000000000, 0x3500000000000000, 0xB500000000000000, 0x7500000000000000, 0xF500000000000000, 0x0D00000000000000, 0x8D00000000000000, 0x4D00000000000000, 0xCD00000000000000, 0x2D00000000000000, 0xAD00000000000000, 0x6D00000000000000, 0xED00000000000000, 0x1D00000000000000, 0x9D00000000000000, 0x5D00000000000000, 0xDD00000000000000, 0x3D00000000000000, 0xBD00000000000000, 0x7D00000000000000, 0xFD00000000000000, 0x0300000000000000, 0x8300000000000000, 0x4300000000000000, 0xC300000000000000, 0x2300000000000000, 0xA300000000000000, 0x6300000000000000, 0xE300000000000000, 0x1300000000000000, 0x9300000000000000, 0x5300000000000000, 0xD300000000000000, 0x3300000000000000, 0xB300000000000000, 0x7300000000000000, 0xF300000000000000, 0x0B00000000000000, 0x8B00000000000000, 0x4B00000000000000, 0xCB00000000000000, 0x2B00000000000000, 0xAB00000000000000, 0x6B00000000000000, 0xEB00000000000000, 0x1B00000000000000, 0x9B00000000000000, 0x5B00000000000000, 0xDB00000000000000, 0x3B00000000000000, 0xBB00000000000000, 0x7B00000000000000, 0xFB00000000000000, 0x0700000000000000, 0x8700000000000000, 0x4700000000000000, 0xC700000000000000, 0x2700000000000000, 0xA700000000000000, 0x6700000000000000, 0xE700000000000000, 0x1700000000000000, 0x9700000000000000, 0x5700000000000000, 0xD700000000000000, 0x3700000000000000, 0xB700000000000000, 0x7700000000000000, 0xF700000000000000, 0x0F00000000000000, 0x8F00000000000000, 0x4F00000000000000, 0xCF00000000000000, 0x2F00000000000000, 0xAF00000000000000, 0x6F00000000000000, 0xEF00000000000000, 0x1F00000000000000, 0x9F00000000000000, 0x5F00000000000000, 0xDF00000000000000, 0x3F00000000000000, 0xBF00000000000000, 0x7F00000000000000, 0xFF00000000000000 };
    private static readonly ulong[] _lookupBitReverse6 = { 0x0000000000000000, 0x0080000000000000, 0x0040000000000000, 0x00C0000000000000, 0x0020000000000000, 0x00A0000000000000, 0x0060000000000000, 0x00E0000000000000, 0x0010000000000000, 0x0090000000000000, 0x0050000000000000, 0x00D0000000000000, 0x0030000000000000, 0x00B0000000000000, 0x0070000000000000, 0x00F0000000000000, 0x0008000000000000, 0x0088000000000000, 0x0048000000000000, 0x00C8000000000000, 0x0028000000000000, 0x00A8000000000000, 0x0068000000000000, 0x00E8000000000000, 0x0018000000000000, 0x0098000000000000, 0x0058000000000000, 0x00D8000000000000, 0x0038000000000000, 0x00B8000000000000, 0x0078000000000000, 0x00F8000000000000, 0x0004000000000000, 0x0084000000000000, 0x0044000000000000, 0x00C4000000000000, 0x0024000000000000, 0x00A4000000000000, 0x0064000000000000, 0x00E4000000000000, 0x0014000000000000, 0x0094000000000000, 0x0054000000000000, 0x00D4000000000000, 0x0034000000000000, 0x00B4000000000000, 0x0074000000000000, 0x00F4000000000000, 0x000C000000000000, 0x008C000000000000, 0x004C000000000000, 0x00CC000000000000, 0x002C000000000000, 0x00AC000000000000, 0x006C000000000000, 0x00EC000000000000, 0x001C000000000000, 0x009C000000000000, 0x005C000000000000, 0x00DC000000000000, 0x003C000000000000, 0x00BC000000000000, 0x007C000000000000, 0x00FC000000000000, 0x0002000000000000, 0x0082000000000000, 0x0042000000000000, 0x00C2000000000000, 0x0022000000000000, 0x00A2000000000000, 0x0062000000000000, 0x00E2000000000000, 0x0012000000000000, 0x0092000000000000, 0x0052000000000000, 0x00D2000000000000, 0x0032000000000000, 0x00B2000000000000, 0x0072000000000000, 0x00F2000000000000, 0x000A000000000000, 0x008A000000000000, 0x004A000000000000, 0x00CA000000000000, 0x002A000000000000, 0x00AA000000000000, 0x006A000000000000, 0x00EA000000000000, 0x001A000000000000, 0x009A000000000000, 0x005A000000000000, 0x00DA000000000000, 0x003A000000000000, 0x00BA000000000000, 0x007A000000000000, 0x00FA000000000000, 0x0006000000000000, 0x0086000000000000, 0x0046000000000000, 0x00C6000000000000, 0x0026000000000000, 0x00A6000000000000, 0x0066000000000000, 0x00E6000000000000, 0x0016000000000000, 0x0096000000000000, 0x0056000000000000, 0x00D6000000000000, 0x0036000000000000, 0x00B6000000000000, 0x0076000000000000, 0x00F6000000000000, 0x000E000000000000, 0x008E000000000000, 0x004E000000000000, 0x00CE000000000000, 0x002E000000000000, 0x00AE000000000000, 0x006E000000000000, 0x00EE000000000000, 0x001E000000000000, 0x009E000000000000, 0x005E000000000000, 0x00DE000000000000, 0x003E000000000000, 0x00BE000000000000, 0x007E000000000000, 0x00FE000000000000, 0x0001000000000000, 0x0081000000000000, 0x0041000000000000, 0x00C1000000000000, 0x0021000000000000, 0x00A1000000000000, 0x0061000000000000, 0x00E1000000000000, 0x0011000000000000, 0x0091000000000000, 0x0051000000000000, 0x00D1000000000000, 0x0031000000000000, 0x00B1000000000000, 0x0071000000000000, 0x00F1000000000000, 0x0009000000000000, 0x0089000000000000, 0x0049000000000000, 0x00C9000000000000, 0x0029000000000000, 0x00A9000000000000, 0x0069000000000000, 0x00E9000000000000, 0x0019000000000000, 0x0099000000000000, 0x0059000000000000, 0x00D9000000000000, 0x0039000000000000, 0x00B9000000000000, 0x0079000000000000, 0x00F9000000000000, 0x0005000000000000, 0x0085000000000000, 0x0045000000000000, 0x00C5000000000000, 0x0025000000000000, 0x00A5000000000000, 0x0065000000000000, 0x00E5000000000000, 0x0015000000000000, 0x0095000000000000, 0x0055000000000000, 0x00D5000000000000, 0x0035000000000000, 0x00B5000000000000, 0x0075000000000000, 0x00F5000000000000, 0x000D000000000000, 0x008D000000000000, 0x004D000000000000, 0x00CD000000000000, 0x002D000000000000, 0x00AD000000000000, 0x006D000000000000, 0x00ED000000000000, 0x001D000000000000, 0x009D000000000000, 0x005D000000000000, 0x00DD000000000000, 0x003D000000000000, 0x00BD000000000000, 0x007D000000000000, 0x00FD000000000000, 0x0003000000000000, 0x0083000000000000, 0x0043000000000000, 0x00C3000000000000, 0x0023000000000000, 0x00A3000000000000, 0x0063000000000000, 0x00E3000000000000, 0x0013000000000000, 0x0093000000000000, 0x0053000000000000, 0x00D3000000000000, 0x0033000000000000, 0x00B3000000000000, 0x0073000000000000, 0x00F3000000000000, 0x000B000000000000, 0x008B000000000000, 0x004B000000000000, 0x00CB000000000000, 0x002B000000000000, 0x00AB000000000000, 0x006B000000000000, 0x00EB000000000000, 0x001B000000000000, 0x009B000000000000, 0x005B000000000000, 0x00DB000000000000, 0x003B000000000000, 0x00BB000000000000, 0x007B000000000000, 0x00FB000000000000, 0x0007000000000000, 0x0087000000000000, 0x0047000000000000, 0x00C7000000000000, 0x0027000000000000, 0x00A7000000000000, 0x0067000000000000, 0x00E7000000000000, 0x0017000000000000, 0x0097000000000000, 0x0057000000000000, 0x00D7000000000000, 0x0037000000000000, 0x00B7000000000000, 0x0077000000000000, 0x00F7000000000000, 0x000F000000000000, 0x008F000000000000, 0x004F000000000000, 0x00CF000000000000, 0x002F000000000000, 0x00AF000000000000, 0x006F000000000000, 0x00EF000000000000, 0x001F000000000000, 0x009F000000000000, 0x005F000000000000, 0x00DF000000000000, 0x003F000000000000, 0x00BF000000000000, 0x007F000000000000, 0x00FF000000000000 };
    private static readonly ulong[] _lookupBitReverse5 = { 0x0000000000000000, 0x0000800000000000, 0x0000400000000000, 0x0000C00000000000, 0x0000200000000000, 0x0000A00000000000, 0x0000600000000000, 0x0000E00000000000, 0x0000100000000000, 0x0000900000000000, 0x0000500000000000, 0x0000D00000000000, 0x0000300000000000, 0x0000B00000000000, 0x0000700000000000, 0x0000F00000000000, 0x0000080000000000, 0x0000880000000000, 0x0000480000000000, 0x0000C80000000000, 0x0000280000000000, 0x0000A80000000000, 0x0000680000000000, 0x0000E80000000000, 0x0000180000000000, 0x0000980000000000, 0x0000580000000000, 0x0000D80000000000, 0x0000380000000000, 0x0000B80000000000, 0x0000780000000000, 0x0000F80000000000, 0x0000040000000000, 0x0000840000000000, 0x0000440000000000, 0x0000C40000000000, 0x0000240000000000, 0x0000A40000000000, 0x0000640000000000, 0x0000E40000000000, 0x0000140000000000, 0x0000940000000000, 0x0000540000000000, 0x0000D40000000000, 0x0000340000000000, 0x0000B40000000000, 0x0000740000000000, 0x0000F40000000000, 0x00000C0000000000, 0x00008C0000000000, 0x00004C0000000000, 0x0000CC0000000000, 0x00002C0000000000, 0x0000AC0000000000, 0x00006C0000000000, 0x0000EC0000000000, 0x00001C0000000000, 0x00009C0000000000, 0x00005C0000000000, 0x0000DC0000000000, 0x00003C0000000000, 0x0000BC0000000000, 0x00007C0000000000, 0x0000FC0000000000, 0x0000020000000000, 0x0000820000000000, 0x0000420000000000, 0x0000C20000000000, 0x0000220000000000, 0x0000A20000000000, 0x0000620000000000, 0x0000E20000000000, 0x0000120000000000, 0x0000920000000000, 0x0000520000000000, 0x0000D20000000000, 0x0000320000000000, 0x0000B20000000000, 0x0000720000000000, 0x0000F20000000000, 0x00000A0000000000, 0x00008A0000000000, 0x00004A0000000000, 0x0000CA0000000000, 0x00002A0000000000, 0x0000AA0000000000, 0x00006A0000000000, 0x0000EA0000000000, 0x00001A0000000000, 0x00009A0000000000, 0x00005A0000000000, 0x0000DA0000000000, 0x00003A0000000000, 0x0000BA0000000000, 0x00007A0000000000, 0x0000FA0000000000, 0x0000060000000000, 0x0000860000000000, 0x0000460000000000, 0x0000C60000000000, 0x0000260000000000, 0x0000A60000000000, 0x0000660000000000, 0x0000E60000000000, 0x0000160000000000, 0x0000960000000000, 0x0000560000000000, 0x0000D60000000000, 0x0000360000000000, 0x0000B60000000000, 0x0000760000000000, 0x0000F60000000000, 0x00000E0000000000, 0x00008E0000000000, 0x00004E0000000000, 0x0000CE0000000000, 0x00002E0000000000, 0x0000AE0000000000, 0x00006E0000000000, 0x0000EE0000000000, 0x00001E0000000000, 0x00009E0000000000, 0x00005E0000000000, 0x0000DE0000000000, 0x00003E0000000000, 0x0000BE0000000000, 0x00007E0000000000, 0x0000FE0000000000, 0x0000010000000000, 0x0000810000000000, 0x0000410000000000, 0x0000C10000000000, 0x0000210000000000, 0x0000A10000000000, 0x0000610000000000, 0x0000E10000000000, 0x0000110000000000, 0x0000910000000000, 0x0000510000000000, 0x0000D10000000000, 0x0000310000000000, 0x0000B10000000000, 0x0000710000000000, 0x0000F10000000000, 0x0000090000000000, 0x0000890000000000, 0x0000490000000000, 0x0000C90000000000, 0x0000290000000000, 0x0000A90000000000, 0x0000690000000000, 0x0000E90000000000, 0x0000190000000000, 0x0000990000000000, 0x0000590000000000, 0x0000D90000000000, 0x0000390000000000, 0x0000B90000000000, 0x0000790000000000, 0x0000F90000000000, 0x0000050000000000, 0x0000850000000000, 0x0000450000000000, 0x0000C50000000000, 0x0000250000000000, 0x0000A50000000000, 0x0000650000000000, 0x0000E50000000000, 0x0000150000000000, 0x0000950000000000, 0x0000550000000000, 0x0000D50000000000, 0x0000350000000000, 0x0000B50000000000, 0x0000750000000000, 0x0000F50000000000, 0x00000D0000000000, 0x00008D0000000000, 0x00004D0000000000, 0x0000CD0000000000, 0x00002D0000000000, 0x0000AD0000000000, 0x00006D0000000000, 0x0000ED0000000000, 0x00001D0000000000, 0x00009D0000000000, 0x00005D0000000000, 0x0000DD0000000000, 0x00003D0000000000, 0x0000BD0000000000, 0x00007D0000000000, 0x0000FD0000000000, 0x0000030000000000, 0x0000830000000000, 0x0000430000000000, 0x0000C30000000000, 0x0000230000000000, 0x0000A30000000000, 0x0000630000000000, 0x0000E30000000000, 0x0000130000000000, 0x0000930000000000, 0x0000530000000000, 0x0000D30000000000, 0x0000330000000000, 0x0000B30000000000, 0x0000730000000000, 0x0000F30000000000, 0x00000B0000000000, 0x00008B0000000000, 0x00004B0000000000, 0x0000CB0000000000, 0x00002B0000000000, 0x0000AB0000000000, 0x00006B0000000000, 0x0000EB0000000000, 0x00001B0000000000, 0x00009B0000000000, 0x00005B0000000000, 0x0000DB0000000000, 0x00003B0000000000, 0x0000BB0000000000, 0x00007B0000000000, 0x0000FB0000000000, 0x0000070000000000, 0x0000870000000000, 0x0000470000000000, 0x0000C70000000000, 0x0000270000000000, 0x0000A70000000000, 0x0000670000000000, 0x0000E70000000000, 0x0000170000000000, 0x0000970000000000, 0x0000570000000000, 0x0000D70000000000, 0x0000370000000000, 0x0000B70000000000, 0x0000770000000000, 0x0000F70000000000, 0x00000F0000000000, 0x00008F0000000000, 0x00004F0000000000, 0x0000CF0000000000, 0x00002F0000000000, 0x0000AF0000000000, 0x00006F0000000000, 0x0000EF0000000000, 0x00001F0000000000, 0x00009F0000000000, 0x00005F0000000000, 0x0000DF0000000000, 0x00003F0000000000, 0x0000BF0000000000, 0x00007F0000000000, 0x0000FF0000000000 };
    private static readonly ulong[] _lookupBitReverse4 = { 0x0000000000000000, 0x0000008000000000, 0x0000004000000000, 0x000000C000000000, 0x0000002000000000, 0x000000A000000000, 0x0000006000000000, 0x000000E000000000, 0x0000001000000000, 0x0000009000000000, 0x0000005000000000, 0x000000D000000000, 0x0000003000000000, 0x000000B000000000, 0x0000007000000000, 0x000000F000000000, 0x0000000800000000, 0x0000008800000000, 0x0000004800000000, 0x000000C800000000, 0x0000002800000000, 0x000000A800000000, 0x0000006800000000, 0x000000E800000000, 0x0000001800000000, 0x0000009800000000, 0x0000005800000000, 0x000000D800000000, 0x0000003800000000, 0x000000B800000000, 0x0000007800000000, 0x000000F800000000, 0x0000000400000000, 0x0000008400000000, 0x0000004400000000, 0x000000C400000000, 0x0000002400000000, 0x000000A400000000, 0x0000006400000000, 0x000000E400000000, 0x0000001400000000, 0x0000009400000000, 0x0000005400000000, 0x000000D400000000, 0x0000003400000000, 0x000000B400000000, 0x0000007400000000, 0x000000F400000000, 0x0000000C00000000, 0x0000008C00000000, 0x0000004C00000000, 0x000000CC00000000, 0x0000002C00000000, 0x000000AC00000000, 0x0000006C00000000, 0x000000EC00000000, 0x0000001C00000000, 0x0000009C00000000, 0x0000005C00000000, 0x000000DC00000000, 0x0000003C00000000, 0x000000BC00000000, 0x0000007C00000000, 0x000000FC00000000, 0x0000000200000000, 0x0000008200000000, 0x0000004200000000, 0x000000C200000000, 0x0000002200000000, 0x000000A200000000, 0x0000006200000000, 0x000000E200000000, 0x0000001200000000, 0x0000009200000000, 0x0000005200000000, 0x000000D200000000, 0x0000003200000000, 0x000000B200000000, 0x0000007200000000, 0x000000F200000000, 0x0000000A00000000, 0x0000008A00000000, 0x0000004A00000000, 0x000000CA00000000, 0x0000002A00000000, 0x000000AA00000000, 0x0000006A00000000, 0x000000EA00000000, 0x0000001A00000000, 0x0000009A00000000, 0x0000005A00000000, 0x000000DA00000000, 0x0000003A00000000, 0x000000BA00000000, 0x0000007A00000000, 0x000000FA00000000, 0x0000000600000000, 0x0000008600000000, 0x0000004600000000, 0x000000C600000000, 0x0000002600000000, 0x000000A600000000, 0x0000006600000000, 0x000000E600000000, 0x0000001600000000, 0x0000009600000000, 0x0000005600000000, 0x000000D600000000, 0x0000003600000000, 0x000000B600000000, 0x0000007600000000, 0x000000F600000000, 0x0000000E00000000, 0x0000008E00000000, 0x0000004E00000000, 0x000000CE00000000, 0x0000002E00000000, 0x000000AE00000000, 0x0000006E00000000, 0x000000EE00000000, 0x0000001E00000000, 0x0000009E00000000, 0x0000005E00000000, 0x000000DE00000000, 0x0000003E00000000, 0x000000BE00000000, 0x0000007E00000000, 0x000000FE00000000, 0x0000000100000000, 0x0000008100000000, 0x0000004100000000, 0x000000C100000000, 0x0000002100000000, 0x000000A100000000, 0x0000006100000000, 0x000000E100000000, 0x0000001100000000, 0x0000009100000000, 0x0000005100000000, 0x000000D100000000, 0x0000003100000000, 0x000000B100000000, 0x0000007100000000, 0x000000F100000000, 0x0000000900000000, 0x0000008900000000, 0x0000004900000000, 0x000000C900000000, 0x0000002900000000, 0x000000A900000000, 0x0000006900000000, 0x000000E900000000, 0x0000001900000000, 0x0000009900000000, 0x0000005900000000, 0x000000D900000000, 0x0000003900000000, 0x000000B900000000, 0x0000007900000000, 0x000000F900000000, 0x0000000500000000, 0x0000008500000000, 0x0000004500000000, 0x000000C500000000, 0x0000002500000000, 0x000000A500000000, 0x0000006500000000, 0x000000E500000000, 0x0000001500000000, 0x0000009500000000, 0x0000005500000000, 0x000000D500000000, 0x0000003500000000, 0x000000B500000000, 0x0000007500000000, 0x000000F500000000, 0x0000000D00000000, 0x0000008D00000000, 0x0000004D00000000, 0x000000CD00000000, 0x0000002D00000000, 0x000000AD00000000, 0x0000006D00000000, 0x000000ED00000000, 0x0000001D00000000, 0x0000009D00000000, 0x0000005D00000000, 0x000000DD00000000, 0x0000003D00000000, 0x000000BD00000000, 0x0000007D00000000, 0x000000FD00000000, 0x0000000300000000, 0x0000008300000000, 0x0000004300000000, 0x000000C300000000, 0x0000002300000000, 0x000000A300000000, 0x0000006300000000, 0x000000E300000000, 0x0000001300000000, 0x0000009300000000, 0x0000005300000000, 0x000000D300000000, 0x0000003300000000, 0x000000B300000000, 0x0000007300000000, 0x000000F300000000, 0x0000000B00000000, 0x0000008B00000000, 0x0000004B00000000, 0x000000CB00000000, 0x0000002B00000000, 0x000000AB00000000, 0x0000006B00000000, 0x000000EB00000000, 0x0000001B00000000, 0x0000009B00000000, 0x0000005B00000000, 0x000000DB00000000, 0x0000003B00000000, 0x000000BB00000000, 0x0000007B00000000, 0x000000FB00000000, 0x0000000700000000, 0x0000008700000000, 0x0000004700000000, 0x000000C700000000, 0x0000002700000000, 0x000000A700000000, 0x0000006700000000, 0x000000E700000000, 0x0000001700000000, 0x0000009700000000, 0x0000005700000000, 0x000000D700000000, 0x0000003700000000, 0x000000B700000000, 0x0000007700000000, 0x000000F700000000, 0x0000000F00000000, 0x0000008F00000000, 0x0000004F00000000, 0x000000CF00000000, 0x0000002F00000000, 0x000000AF00000000, 0x0000006F00000000, 0x000000EF00000000, 0x0000001F00000000, 0x0000009F00000000, 0x0000005F00000000, 0x000000DF00000000, 0x0000003F00000000, 0x000000BF00000000, 0x0000007F00000000, 0x000000FF00000000 };
    private static readonly ulong[] _lookupBitReverse3 = { 0x0000000000000000, 0x0000000080000000, 0x0000000040000000, 0x00000000C0000000, 0x0000000020000000, 0x00000000A0000000, 0x0000000060000000, 0x00000000E0000000, 0x0000000010000000, 0x0000000090000000, 0x0000000050000000, 0x00000000D0000000, 0x0000000030000000, 0x00000000B0000000, 0x0000000070000000, 0x00000000F0000000, 0x0000000008000000, 0x0000000088000000, 0x0000000048000000, 0x00000000C8000000, 0x0000000028000000, 0x00000000A8000000, 0x0000000068000000, 0x00000000E8000000, 0x0000000018000000, 0x0000000098000000, 0x0000000058000000, 0x00000000D8000000, 0x0000000038000000, 0x00000000B8000000, 0x0000000078000000, 0x00000000F8000000, 0x0000000004000000, 0x0000000084000000, 0x0000000044000000, 0x00000000C4000000, 0x0000000024000000, 0x00000000A4000000, 0x0000000064000000, 0x00000000E4000000, 0x0000000014000000, 0x0000000094000000, 0x0000000054000000, 0x00000000D4000000, 0x0000000034000000, 0x00000000B4000000, 0x0000000074000000, 0x00000000F4000000, 0x000000000C000000, 0x000000008C000000, 0x000000004C000000, 0x00000000CC000000, 0x000000002C000000, 0x00000000AC000000, 0x000000006C000000, 0x00000000EC000000, 0x000000001C000000, 0x000000009C000000, 0x000000005C000000, 0x00000000DC000000, 0x000000003C000000, 0x00000000BC000000, 0x000000007C000000, 0x00000000FC000000, 0x0000000002000000, 0x0000000082000000, 0x0000000042000000, 0x00000000C2000000, 0x0000000022000000, 0x00000000A2000000, 0x0000000062000000, 0x00000000E2000000, 0x0000000012000000, 0x0000000092000000, 0x0000000052000000, 0x00000000D2000000, 0x0000000032000000, 0x00000000B2000000, 0x0000000072000000, 0x00000000F2000000, 0x000000000A000000, 0x000000008A000000, 0x000000004A000000, 0x00000000CA000000, 0x000000002A000000, 0x00000000AA000000, 0x000000006A000000, 0x00000000EA000000, 0x000000001A000000, 0x000000009A000000, 0x000000005A000000, 0x00000000DA000000, 0x000000003A000000, 0x00000000BA000000, 0x000000007A000000, 0x00000000FA000000, 0x0000000006000000, 0x0000000086000000, 0x0000000046000000, 0x00000000C6000000, 0x0000000026000000, 0x00000000A6000000, 0x0000000066000000, 0x00000000E6000000, 0x0000000016000000, 0x0000000096000000, 0x0000000056000000, 0x00000000D6000000, 0x0000000036000000, 0x00000000B6000000, 0x0000000076000000, 0x00000000F6000000, 0x000000000E000000, 0x000000008E000000, 0x000000004E000000, 0x00000000CE000000, 0x000000002E000000, 0x00000000AE000000, 0x000000006E000000, 0x00000000EE000000, 0x000000001E000000, 0x000000009E000000, 0x000000005E000000, 0x00000000DE000000, 0x000000003E000000, 0x00000000BE000000, 0x000000007E000000, 0x00000000FE000000, 0x0000000001000000, 0x0000000081000000, 0x0000000041000000, 0x00000000C1000000, 0x0000000021000000, 0x00000000A1000000, 0x0000000061000000, 0x00000000E1000000, 0x0000000011000000, 0x0000000091000000, 0x0000000051000000, 0x00000000D1000000, 0x0000000031000000, 0x00000000B1000000, 0x0000000071000000, 0x00000000F1000000, 0x0000000009000000, 0x0000000089000000, 0x0000000049000000, 0x00000000C9000000, 0x0000000029000000, 0x00000000A9000000, 0x0000000069000000, 0x00000000E9000000, 0x0000000019000000, 0x0000000099000000, 0x0000000059000000, 0x00000000D9000000, 0x0000000039000000, 0x00000000B9000000, 0x0000000079000000, 0x00000000F9000000, 0x0000000005000000, 0x0000000085000000, 0x0000000045000000, 0x00000000C5000000, 0x0000000025000000, 0x00000000A5000000, 0x0000000065000000, 0x00000000E5000000, 0x0000000015000000, 0x0000000095000000, 0x0000000055000000, 0x00000000D5000000, 0x0000000035000000, 0x00000000B5000000, 0x0000000075000000, 0x00000000F5000000, 0x000000000D000000, 0x000000008D000000, 0x000000004D000000, 0x00000000CD000000, 0x000000002D000000, 0x00000000AD000000, 0x000000006D000000, 0x00000000ED000000, 0x000000001D000000, 0x000000009D000000, 0x000000005D000000, 0x00000000DD000000, 0x000000003D000000, 0x00000000BD000000, 0x000000007D000000, 0x00000000FD000000, 0x0000000003000000, 0x0000000083000000, 0x0000000043000000, 0x00000000C3000000, 0x0000000023000000, 0x00000000A3000000, 0x0000000063000000, 0x00000000E3000000, 0x0000000013000000, 0x0000000093000000, 0x0000000053000000, 0x00000000D3000000, 0x0000000033000000, 0x00000000B3000000, 0x0000000073000000, 0x00000000F3000000, 0x000000000B000000, 0x000000008B000000, 0x000000004B000000, 0x00000000CB000000, 0x000000002B000000, 0x00000000AB000000, 0x000000006B000000, 0x00000000EB000000, 0x000000001B000000, 0x000000009B000000, 0x000000005B000000, 0x00000000DB000000, 0x000000003B000000, 0x00000000BB000000, 0x000000007B000000, 0x00000000FB000000, 0x0000000007000000, 0x0000000087000000, 0x0000000047000000, 0x00000000C7000000, 0x0000000027000000, 0x00000000A7000000, 0x0000000067000000, 0x00000000E7000000, 0x0000000017000000, 0x0000000097000000, 0x0000000057000000, 0x00000000D7000000, 0x0000000037000000, 0x00000000B7000000, 0x0000000077000000, 0x00000000F7000000, 0x000000000F000000, 0x000000008F000000, 0x000000004F000000, 0x00000000CF000000, 0x000000002F000000, 0x00000000AF000000, 0x000000006F000000, 0x00000000EF000000, 0x000000001F000000, 0x000000009F000000, 0x000000005F000000, 0x00000000DF000000, 0x000000003F000000, 0x00000000BF000000, 0x000000007F000000, 0x00000000FF000000 };
    private static readonly ulong[] _lookupBitReverse2 = { 0x0000000000000000, 0x0000000000800000, 0x0000000000400000, 0x0000000000C00000, 0x0000000000200000, 0x0000000000A00000, 0x0000000000600000, 0x0000000000E00000, 0x0000000000100000, 0x0000000000900000, 0x0000000000500000, 0x0000000000D00000, 0x0000000000300000, 0x0000000000B00000, 0x0000000000700000, 0x0000000000F00000, 0x0000000000080000, 0x0000000000880000, 0x0000000000480000, 0x0000000000C80000, 0x0000000000280000, 0x0000000000A80000, 0x0000000000680000, 0x0000000000E80000, 0x0000000000180000, 0x0000000000980000, 0x0000000000580000, 0x0000000000D80000, 0x0000000000380000, 0x0000000000B80000, 0x0000000000780000, 0x0000000000F80000, 0x0000000000040000, 0x0000000000840000, 0x0000000000440000, 0x0000000000C40000, 0x0000000000240000, 0x0000000000A40000, 0x0000000000640000, 0x0000000000E40000, 0x0000000000140000, 0x0000000000940000, 0x0000000000540000, 0x0000000000D40000, 0x0000000000340000, 0x0000000000B40000, 0x0000000000740000, 0x0000000000F40000, 0x00000000000C0000, 0x00000000008C0000, 0x00000000004C0000, 0x0000000000CC0000, 0x00000000002C0000, 0x0000000000AC0000, 0x00000000006C0000, 0x0000000000EC0000, 0x00000000001C0000, 0x00000000009C0000, 0x00000000005C0000, 0x0000000000DC0000, 0x00000000003C0000, 0x0000000000BC0000, 0x00000000007C0000, 0x0000000000FC0000, 0x0000000000020000, 0x0000000000820000, 0x0000000000420000, 0x0000000000C20000, 0x0000000000220000, 0x0000000000A20000, 0x0000000000620000, 0x0000000000E20000, 0x0000000000120000, 0x0000000000920000, 0x0000000000520000, 0x0000000000D20000, 0x0000000000320000, 0x0000000000B20000, 0x0000000000720000, 0x0000000000F20000, 0x00000000000A0000, 0x00000000008A0000, 0x00000000004A0000, 0x0000000000CA0000, 0x00000000002A0000, 0x0000000000AA0000, 0x00000000006A0000, 0x0000000000EA0000, 0x00000000001A0000, 0x00000000009A0000, 0x00000000005A0000, 0x0000000000DA0000, 0x00000000003A0000, 0x0000000000BA0000, 0x00000000007A0000, 0x0000000000FA0000, 0x0000000000060000, 0x0000000000860000, 0x0000000000460000, 0x0000000000C60000, 0x0000000000260000, 0x0000000000A60000, 0x0000000000660000, 0x0000000000E60000, 0x0000000000160000, 0x0000000000960000, 0x0000000000560000, 0x0000000000D60000, 0x0000000000360000, 0x0000000000B60000, 0x0000000000760000, 0x0000000000F60000, 0x00000000000E0000, 0x00000000008E0000, 0x00000000004E0000, 0x0000000000CE0000, 0x00000000002E0000, 0x0000000000AE0000, 0x00000000006E0000, 0x0000000000EE0000, 0x00000000001E0000, 0x00000000009E0000, 0x00000000005E0000, 0x0000000000DE0000, 0x00000000003E0000, 0x0000000000BE0000, 0x00000000007E0000, 0x0000000000FE0000, 0x0000000000010000, 0x0000000000810000, 0x0000000000410000, 0x0000000000C10000, 0x0000000000210000, 0x0000000000A10000, 0x0000000000610000, 0x0000000000E10000, 0x0000000000110000, 0x0000000000910000, 0x0000000000510000, 0x0000000000D10000, 0x0000000000310000, 0x0000000000B10000, 0x0000000000710000, 0x0000000000F10000, 0x0000000000090000, 0x0000000000890000, 0x0000000000490000, 0x0000000000C90000, 0x0000000000290000, 0x0000000000A90000, 0x0000000000690000, 0x0000000000E90000, 0x0000000000190000, 0x0000000000990000, 0x0000000000590000, 0x0000000000D90000, 0x0000000000390000, 0x0000000000B90000, 0x0000000000790000, 0x0000000000F90000, 0x0000000000050000, 0x0000000000850000, 0x0000000000450000, 0x0000000000C50000, 0x0000000000250000, 0x0000000000A50000, 0x0000000000650000, 0x0000000000E50000, 0x0000000000150000, 0x0000000000950000, 0x0000000000550000, 0x0000000000D50000, 0x0000000000350000, 0x0000000000B50000, 0x0000000000750000, 0x0000000000F50000, 0x00000000000D0000, 0x00000000008D0000, 0x00000000004D0000, 0x0000000000CD0000, 0x00000000002D0000, 0x0000000000AD0000, 0x00000000006D0000, 0x0000000000ED0000, 0x00000000001D0000, 0x00000000009D0000, 0x00000000005D0000, 0x0000000000DD0000, 0x00000000003D0000, 0x0000000000BD0000, 0x00000000007D0000, 0x0000000000FD0000, 0x0000000000030000, 0x0000000000830000, 0x0000000000430000, 0x0000000000C30000, 0x0000000000230000, 0x0000000000A30000, 0x0000000000630000, 0x0000000000E30000, 0x0000000000130000, 0x0000000000930000, 0x0000000000530000, 0x0000000000D30000, 0x0000000000330000, 0x0000000000B30000, 0x0000000000730000, 0x0000000000F30000, 0x00000000000B0000, 0x00000000008B0000, 0x00000000004B0000, 0x0000000000CB0000, 0x00000000002B0000, 0x0000000000AB0000, 0x00000000006B0000, 0x0000000000EB0000, 0x00000000001B0000, 0x00000000009B0000, 0x00000000005B0000, 0x0000000000DB0000, 0x00000000003B0000, 0x0000000000BB0000, 0x00000000007B0000, 0x0000000000FB0000, 0x0000000000070000, 0x0000000000870000, 0x0000000000470000, 0x0000000000C70000, 0x0000000000270000, 0x0000000000A70000, 0x0000000000670000, 0x0000000000E70000, 0x0000000000170000, 0x0000000000970000, 0x0000000000570000, 0x0000000000D70000, 0x0000000000370000, 0x0000000000B70000, 0x0000000000770000, 0x0000000000F70000, 0x00000000000F0000, 0x00000000008F0000, 0x00000000004F0000, 0x0000000000CF0000, 0x00000000002F0000, 0x0000000000AF0000, 0x00000000006F0000, 0x0000000000EF0000, 0x00000000001F0000, 0x00000000009F0000, 0x00000000005F0000, 0x0000000000DF0000, 0x00000000003F0000, 0x0000000000BF0000, 0x00000000007F0000, 0x0000000000FF0000 };
    private static readonly ulong[] _lookupBitReverse1 = { 0x0000000000000000, 0x0000000000008000, 0x0000000000004000, 0x000000000000C000, 0x0000000000002000, 0x000000000000A000, 0x0000000000006000, 0x000000000000E000, 0x0000000000001000, 0x0000000000009000, 0x0000000000005000, 0x000000000000D000, 0x0000000000003000, 0x000000000000B000, 0x0000000000007000, 0x000000000000F000, 0x0000000000000800, 0x0000000000008800, 0x0000000000004800, 0x000000000000C800, 0x0000000000002800, 0x000000000000A800, 0x0000000000006800, 0x000000000000E800, 0x0000000000001800, 0x0000000000009800, 0x0000000000005800, 0x000000000000D800, 0x0000000000003800, 0x000000000000B800, 0x0000000000007800, 0x000000000000F800, 0x0000000000000400, 0x0000000000008400, 0x0000000000004400, 0x000000000000C400, 0x0000000000002400, 0x000000000000A400, 0x0000000000006400, 0x000000000000E400, 0x0000000000001400, 0x0000000000009400, 0x0000000000005400, 0x000000000000D400, 0x0000000000003400, 0x000000000000B400, 0x0000000000007400, 0x000000000000F400, 0x0000000000000C00, 0x0000000000008C00, 0x0000000000004C00, 0x000000000000CC00, 0x0000000000002C00, 0x000000000000AC00, 0x0000000000006C00, 0x000000000000EC00, 0x0000000000001C00, 0x0000000000009C00, 0x0000000000005C00, 0x000000000000DC00, 0x0000000000003C00, 0x000000000000BC00, 0x0000000000007C00, 0x000000000000FC00, 0x0000000000000200, 0x0000000000008200, 0x0000000000004200, 0x000000000000C200, 0x0000000000002200, 0x000000000000A200, 0x0000000000006200, 0x000000000000E200, 0x0000000000001200, 0x0000000000009200, 0x0000000000005200, 0x000000000000D200, 0x0000000000003200, 0x000000000000B200, 0x0000000000007200, 0x000000000000F200, 0x0000000000000A00, 0x0000000000008A00, 0x0000000000004A00, 0x000000000000CA00, 0x0000000000002A00, 0x000000000000AA00, 0x0000000000006A00, 0x000000000000EA00, 0x0000000000001A00, 0x0000000000009A00, 0x0000000000005A00, 0x000000000000DA00, 0x0000000000003A00, 0x000000000000BA00, 0x0000000000007A00, 0x000000000000FA00, 0x0000000000000600, 0x0000000000008600, 0x0000000000004600, 0x000000000000C600, 0x0000000000002600, 0x000000000000A600, 0x0000000000006600, 0x000000000000E600, 0x0000000000001600, 0x0000000000009600, 0x0000000000005600, 0x000000000000D600, 0x0000000000003600, 0x000000000000B600, 0x0000000000007600, 0x000000000000F600, 0x0000000000000E00, 0x0000000000008E00, 0x0000000000004E00, 0x000000000000CE00, 0x0000000000002E00, 0x000000000000AE00, 0x0000000000006E00, 0x000000000000EE00, 0x0000000000001E00, 0x0000000000009E00, 0x0000000000005E00, 0x000000000000DE00, 0x0000000000003E00, 0x000000000000BE00, 0x0000000000007E00, 0x000000000000FE00, 0x0000000000000100, 0x0000000000008100, 0x0000000000004100, 0x000000000000C100, 0x0000000000002100, 0x000000000000A100, 0x0000000000006100, 0x000000000000E100, 0x0000000000001100, 0x0000000000009100, 0x0000000000005100, 0x000000000000D100, 0x0000000000003100, 0x000000000000B100, 0x0000000000007100, 0x000000000000F100, 0x0000000000000900, 0x0000000000008900, 0x0000000000004900, 0x000000000000C900, 0x0000000000002900, 0x000000000000A900, 0x0000000000006900, 0x000000000000E900, 0x0000000000001900, 0x0000000000009900, 0x0000000000005900, 0x000000000000D900, 0x0000000000003900, 0x000000000000B900, 0x0000000000007900, 0x000000000000F900, 0x0000000000000500, 0x0000000000008500, 0x0000000000004500, 0x000000000000C500, 0x0000000000002500, 0x000000000000A500, 0x0000000000006500, 0x000000000000E500, 0x0000000000001500, 0x0000000000009500, 0x0000000000005500, 0x000000000000D500, 0x0000000000003500, 0x000000000000B500, 0x0000000000007500, 0x000000000000F500, 0x0000000000000D00, 0x0000000000008D00, 0x0000000000004D00, 0x000000000000CD00, 0x0000000000002D00, 0x000000000000AD00, 0x0000000000006D00, 0x000000000000ED00, 0x0000000000001D00, 0x0000000000009D00, 0x0000000000005D00, 0x000000000000DD00, 0x0000000000003D00, 0x000000000000BD00, 0x0000000000007D00, 0x000000000000FD00, 0x0000000000000300, 0x0000000000008300, 0x0000000000004300, 0x000000000000C300, 0x0000000000002300, 0x000000000000A300, 0x0000000000006300, 0x000000000000E300, 0x0000000000001300, 0x0000000000009300, 0x0000000000005300, 0x000000000000D300, 0x0000000000003300, 0x000000000000B300, 0x0000000000007300, 0x000000000000F300, 0x0000000000000B00, 0x0000000000008B00, 0x0000000000004B00, 0x000000000000CB00, 0x0000000000002B00, 0x000000000000AB00, 0x0000000000006B00, 0x000000000000EB00, 0x0000000000001B00, 0x0000000000009B00, 0x0000000000005B00, 0x000000000000DB00, 0x0000000000003B00, 0x000000000000BB00, 0x0000000000007B00, 0x000000000000FB00, 0x0000000000000700, 0x0000000000008700, 0x0000000000004700, 0x000000000000C700, 0x0000000000002700, 0x000000000000A700, 0x0000000000006700, 0x000000000000E700, 0x0000000000001700, 0x0000000000009700, 0x0000000000005700, 0x000000000000D700, 0x0000000000003700, 0x000000000000B700, 0x0000000000007700, 0x000000000000F700, 0x0000000000000F00, 0x0000000000008F00, 0x0000000000004F00, 0x000000000000CF00, 0x0000000000002F00, 0x000000000000AF00, 0x0000000000006F00, 0x000000000000EF00, 0x0000000000001F00, 0x0000000000009F00, 0x0000000000005F00, 0x000000000000DF00, 0x0000000000003F00, 0x000000000000BF00, 0x0000000000007F00, 0x000000000000FF00 };
    private static readonly ulong[] _lookupBitReverse0 = { 0x0000000000000000, 0x0000000000000080, 0x0000000000000040, 0x00000000000000C0, 0x0000000000000020, 0x00000000000000A0, 0x0000000000000060, 0x00000000000000E0, 0x0000000000000010, 0x0000000000000090, 0x0000000000000050, 0x00000000000000D0, 0x0000000000000030, 0x00000000000000B0, 0x0000000000000070, 0x00000000000000F0, 0x0000000000000008, 0x0000000000000088, 0x0000000000000048, 0x00000000000000C8, 0x0000000000000028, 0x00000000000000A8, 0x0000000000000068, 0x00000000000000E8, 0x0000000000000018, 0x0000000000000098, 0x0000000000000058, 0x00000000000000D8, 0x0000000000000038, 0x00000000000000B8, 0x0000000000000078, 0x00000000000000F8, 0x0000000000000004, 0x0000000000000084, 0x0000000000000044, 0x00000000000000C4, 0x0000000000000024, 0x00000000000000A4, 0x0000000000000064, 0x00000000000000E4, 0x0000000000000014, 0x0000000000000094, 0x0000000000000054, 0x00000000000000D4, 0x0000000000000034, 0x00000000000000B4, 0x0000000000000074, 0x00000000000000F4, 0x000000000000000C, 0x000000000000008C, 0x000000000000004C, 0x00000000000000CC, 0x000000000000002C, 0x00000000000000AC, 0x000000000000006C, 0x00000000000000EC, 0x000000000000001C, 0x000000000000009C, 0x000000000000005C, 0x00000000000000DC, 0x000000000000003C, 0x00000000000000BC, 0x000000000000007C, 0x00000000000000FC, 0x0000000000000002, 0x0000000000000082, 0x0000000000000042, 0x00000000000000C2, 0x0000000000000022, 0x00000000000000A2, 0x0000000000000062, 0x00000000000000E2, 0x0000000000000012, 0x0000000000000092, 0x0000000000000052, 0x00000000000000D2, 0x0000000000000032, 0x00000000000000B2, 0x0000000000000072, 0x00000000000000F2, 0x000000000000000A, 0x000000000000008A, 0x000000000000004A, 0x00000000000000CA, 0x000000000000002A, 0x00000000000000AA, 0x000000000000006A, 0x00000000000000EA, 0x000000000000001A, 0x000000000000009A, 0x000000000000005A, 0x00000000000000DA, 0x000000000000003A, 0x00000000000000BA, 0x000000000000007A, 0x00000000000000FA, 0x0000000000000006, 0x0000000000000086, 0x0000000000000046, 0x00000000000000C6, 0x0000000000000026, 0x00000000000000A6, 0x0000000000000066, 0x00000000000000E6, 0x0000000000000016, 0x0000000000000096, 0x0000000000000056, 0x00000000000000D6, 0x0000000000000036, 0x00000000000000B6, 0x0000000000000076, 0x00000000000000F6, 0x000000000000000E, 0x000000000000008E, 0x000000000000004E, 0x00000000000000CE, 0x000000000000002E, 0x00000000000000AE, 0x000000000000006E, 0x00000000000000EE, 0x000000000000001E, 0x000000000000009E, 0x000000000000005E, 0x00000000000000DE, 0x000000000000003E, 0x00000000000000BE, 0x000000000000007E, 0x00000000000000FE, 0x0000000000000001, 0x0000000000000081, 0x0000000000000041, 0x00000000000000C1, 0x0000000000000021, 0x00000000000000A1, 0x0000000000000061, 0x00000000000000E1, 0x0000000000000011, 0x0000000000000091, 0x0000000000000051, 0x00000000000000D1, 0x0000000000000031, 0x00000000000000B1, 0x0000000000000071, 0x00000000000000F1, 0x0000000000000009, 0x0000000000000089, 0x0000000000000049, 0x00000000000000C9, 0x0000000000000029, 0x00000000000000A9, 0x0000000000000069, 0x00000000000000E9, 0x0000000000000019, 0x0000000000000099, 0x0000000000000059, 0x00000000000000D9, 0x0000000000000039, 0x00000000000000B9, 0x0000000000000079, 0x00000000000000F9, 0x0000000000000005, 0x0000000000000085, 0x0000000000000045, 0x00000000000000C5, 0x0000000000000025, 0x00000000000000A5, 0x0000000000000065, 0x00000000000000E5, 0x0000000000000015, 0x0000000000000095, 0x0000000000000055, 0x00000000000000D5, 0x0000000000000035, 0x00000000000000B5, 0x0000000000000075, 0x00000000000000F5, 0x000000000000000D, 0x000000000000008D, 0x000000000000004D, 0x00000000000000CD, 0x000000000000002D, 0x00000000000000AD, 0x000000000000006D, 0x00000000000000ED, 0x000000000000001D, 0x000000000000009D, 0x000000000000005D, 0x00000000000000DD, 0x000000000000003D, 0x00000000000000BD, 0x000000000000007D, 0x00000000000000FD, 0x0000000000000003, 0x0000000000000083, 0x0000000000000043, 0x00000000000000C3, 0x0000000000000023, 0x00000000000000A3, 0x0000000000000063, 0x00000000000000E3, 0x0000000000000013, 0x0000000000000093, 0x0000000000000053, 0x00000000000000D3, 0x0000000000000033, 0x00000000000000B3, 0x0000000000000073, 0x00000000000000F3, 0x000000000000000B, 0x000000000000008B, 0x000000000000004B, 0x00000000000000CB, 0x000000000000002B, 0x00000000000000AB, 0x000000000000006B, 0x00000000000000EB, 0x000000000000001B, 0x000000000000009B, 0x000000000000005B, 0x00000000000000DB, 0x000000000000003B, 0x00000000000000BB, 0x000000000000007B, 0x00000000000000FB, 0x0000000000000007, 0x0000000000000087, 0x0000000000000047, 0x00000000000000C7, 0x0000000000000027, 0x00000000000000A7, 0x0000000000000067, 0x00000000000000E7, 0x0000000000000017, 0x0000000000000097, 0x0000000000000057, 0x00000000000000D7, 0x0000000000000037, 0x00000000000000B7, 0x0000000000000077, 0x00000000000000F7, 0x000000000000000F, 0x000000000000008F, 0x000000000000004F, 0x00000000000000CF, 0x000000000000002F, 0x00000000000000AF, 0x000000000000006F, 0x00000000000000EF, 0x000000000000001F, 0x000000000000009F, 0x000000000000005F, 0x00000000000000DF, 0x000000000000003F, 0x00000000000000BF, 0x000000000000007F, 0x00000000000000FF };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static ulong BitwiseReverse(ulong value) {
        return _lookupBitReverse7[value & 0xFF] | _lookupBitReverse6[(value >> 8) & 0xFF] | _lookupBitReverse5[(value >> 16) & 0xFF] | _lookupBitReverse4[(value >> 24) & 0xFF] | _lookupBitReverse3[(value >> 32) & 0xFF] | _lookupBitReverse2[(value >> 40) & 0xFF] | _lookupBitReverse1[(value >> 48) & 0xFF] | _lookupBitReverse0[(value >> 56)];
    }

    #endregion Algorithm


    /// <summary>
    /// Gets current digest.
    /// </summary>
    public ulong HashAsUInt64 {
        get {
            if (_reverseOut) {
                return (BitwiseReverse(_currDigest) ^ _finalXorValue);
            } else {
                return (_currDigest ^ _finalXorValue);
            }
        }
    }


    #region ReciprocalPolynomial

    /// <summary>
    /// Converts polynomial to its reversed reciprocal form.
    /// </summary>
    /// <param name="polynomial">Polynomial.</param>
    public static ulong ToReversedReciprocalPolynomial(ulong polynomial) {
        return (polynomial >> 1) | 0x8000000000000000;
    }

    /// <summary>
    /// Converts polynomial from its reversed reciprocal to normal form.
    /// </summary>
    /// <param name="reversedReciprocalPolynomial">Reversed reciprocal polynomial.</param>
    public static ulong FromReversedReciprocalPolynomial(ulong reversedReciprocalPolynomial) {
        return (reversedReciprocalPolynomial << 1) | 0x01;
    }

    #endregion ReciprocalPolynomial

}
